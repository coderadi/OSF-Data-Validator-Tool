#!/usr/bin/php -q

<?php

  // Set the working directory of this script to its home directory. That way, if it is ran from elsewhere,
  // the relative paths will follow.
  chdir(dirname(realpath($argv[0])));
  
  include_once('inc/clt.php');

  if(PHP_SAPI != 'cli')
  {
    die('This is a shell application, so make sure to run this application in your terminal.');
  }   
  
  // Load configurations
  $config = parse_ini_file("config.ini", TRUE);
  
  // Get commandline options
  $arguments = getopt('h::v::s::f::', array('help::', 
                                            'output-xml::',
                                            'output-json::',
                                            'allocated-memory::',
                                            'fix::'));  
  
  // Displaying DSF's help screen if required
  if(isset($arguments['h']) || isset($arguments['help']))
  {
    cecho("Usage: dvt [OPTIONS]\n\n", 'WHITE');
    cecho("Usage examples: \n", 'WHITE');
    cecho("    Validate data: dvt -v\n", 'WHITE');
    cecho("\nOptions:\n", 'WHITE');
    cecho("--output-xml=\"[PATH]\"                 Output the validation reports in a file specified\n", 'WHITE');
    cecho("                                      by the path in XML format.\n", 'WHITE');
    cecho("--output-json=\"[PATH]\"                Output the validation reports in a file specified\n", 'WHITE');
    cecho("                                      by the path in JSON format.\n", 'WHITE');
    cecho("--allocated-memory=\"M\"                Specifies the number of Mb of memory allocated to the DVT\n", 'WHITE');
    cecho("                                      The number of Mb should be specified in this parameter\n", 'WHITE');
    cecho("-v                                    Run all the data validation tests\n", 'WHITE');
    cecho("-s                                    Silent. Do not output anything to the shell.\n", 'WHITE');
    cecho("-f, --fix                             Tries to automatically fix a validation test that fails\n", 'WHITE');
    cecho("                                      Note: not all checks support this option\n", 'WHITE');
    cecho("-h, --help                            Show this help section\n\n", 'WHITE');
    cecho("\n", 'WHITE');
    exit;
  }     
  
  include_once(rtrim($config['structWSF-PHP-API']['folder'], '/')."/StructuredDynamics/SplClassLoader.php");  
  
  // Load the \ws namespace where all the web service code is 
  $loader_ws = new SplClassLoader('StructuredDynamics\structwsf\php\api\ws', rtrim($config['structWSF-PHP-API']['folder'], '/'));
  $loader_ws->register();

  // Load the \framework namespace where all the supporting (utility) code is
  $loader_framework = new SplClassLoader('StructuredDynamics\structwsf\php\api\framework', rtrim($config['structWSF-PHP-API']['folder'], '/'));
  $loader_framework->register();

  // Load the \framework namespace where all the supporting (utility) code is
  $loader_core_framework = new SplClassLoader('StructuredDynamics\structwsf\framework', rtrim($config['structWSF-PHP-API']['folder'], '/'));
  $loader_core_framework->register();  

  // Load the \framework namespace where all the supporting (utility) code is
  $loader_core_framework = new SplClassLoader('StructuredDynamics\structwsf\validator\checks', rtrim($config['structWSF-PHP-API']['folder'], '/'));
  $loader_core_framework->register();  
  
  global $silent;
  $outputXMLPath = '';
  $outputJSONPath = '';
  
  if(isset($arguments['s']))
  {
    $silent = TRUE;
  }
  else
  {
    $silent = FALSE;
  }
  
  if(isset($arguments['allocated-memory']))
  {
    ini_set('memory_limit', $arguments['allocated-memory'].'M');
  }  
  
  if(isset($arguments['output-xml']))
  {
    $outputXMLPath = $arguments['output-xml'];

    if(@file_put_contents($outputXMLPath, "<?xml version=\"1.0\"?>\n") === FALSE)
    {
      cecho("Couldn't write file specified in the --output-xml parameter\n\n", 'RED');
      die(1);
    }
  }  
  
  if(isset($arguments['output-json']))
  {
    $outputJSONPath = $arguments['output-json'];

    if(@file_put_contents($outputJSONPath, "") === FALSE)
    {
      cecho("Couldn't write file specified in the --output-json parameter\n\n", 'RED');
      die(1);
    }
  }  

  if(isset($arguments['v']))
  {  
    cecho("All data of the following dataset and ontologies URIs will be validated on this server:\n\n", 'MAGENTA');
    
    foreach($config['data']['datasets'] as $dataset)  
    {
      cecho('  -> '.$dataset."\n", 'MAGENTA');
    }
    
    foreach($config['data']['ontologies'] as $ontology)  
    {
      cecho('  -> '.$ontology."\n", 'MAGENTA');
    }  
    
    if(!empty($outputXMLPath))
    {
      file_put_contents($outputXMLPath, "<checks>\n", FILE_APPEND);
    }
    
    if(!empty($outputJSONPath))
    {
      file_put_contents($outputJSONPath, "{\n  \"checks\": [\n", FILE_APPEND);
      $nbCheckFailing = 0;
    }
      
    // Run all configured tests
    
    foreach($config['tests']['checks'] as $checkTest)  
    {
      $check = new $checkTest();
      
      $check->setNetwork($config['structwsf']['network']);
      $check->setCheckUsingOntologies($config['data']['ontologies']);
      $check->setCheckOnDatasets($config['data']['datasets']);
      
      $check->run();   
      
      if(isset($arguments['fix']) || isset($arguments['f']))      
      {
        $check->fix();
      }
      
      if(!empty($outputXMLPath))
      {
        file_put_contents($outputXMLPath, $check->outputXML(), FILE_APPEND);
      }
      
      if(!empty($outputJSONPath))
      {
        $outputJSON = $check->outputJSON();
        
        if($nbCheckFailing > 0 && !empty($outputJSON))
        {
          file_put_contents($outputJSONPath, ",\n", FILE_APPEND);
        }
        
        file_put_contents($outputJSONPath, rtrim($outputJSON, "\n"), FILE_APPEND);
        
        $nbCheckFailing++;
      }
    }
    
    if(!empty($outputXMLPath))
    {
      file_put_contents($outputXMLPath, "</checks>\n", FILE_APPEND);
    }
    
    if(!empty($outputJSONPath))
    {
      file_put_contents($outputJSONPath, "  ]\n}\n", FILE_APPEND);
    }    
  }
  
?>
